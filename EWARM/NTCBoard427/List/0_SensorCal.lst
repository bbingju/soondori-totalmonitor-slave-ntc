###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.1.212/W32 for ARM         06/Sep/2019  23:26:44
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\Src\0_SensorCal.c
#    Command line =
#        -f C:\Users\ilkorea\AppData\Local\Temp\EW795F.tmp
#        (D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\Src\0_SensorCal.c
#        -D USE_HAL_DRIVER -D STM32F103xB -lc
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM\NTCBoard427\List
#        -o
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM\NTCBoard427\Obj
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "C:\Program Files
#        (x86)\IAR Systems\Embedded Workbench 8.3\arm\inc\c\DLib_Config_Full.h"
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Inc\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Drivers/STM32F1xx_HAL_Driver/Inc/Legacy\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Drivers/CMSIS/Device/ST/STM32F1xx/Include\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Drivers/CMSIS/Include\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/portable/IAR/ARM_CM3\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/include\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Middlewares/SEGGER\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Middlewares/FreeRTOSV9\
#        -I
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM/../Middlewares/FreeRTOSV9/Config\
#        -On -I "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM\NTCBoard427\List\0_SensorCal.lst
#    Object file  =
#        D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\EWARM\NTCBoard427\Obj\0_SensorCal.o
#
###############################################################################

D:\00_Soondori\07_TotalTempMonitor\11_Firmware\NTCBoard427\Src\0_SensorCal.c
      1          #include "0_SensorCal.h"
      2          
      3          
      4          
      5          /*********************************************************************
      6          *	 	pTableNTC
      7          *		NTC 10KR 에 대한 환산용 테이블 
      8          **********************************************************************/	
      9          #ifndef __P_TABLE_NTC__
     10          #define __P_TABLE_NTC__
     11          
     12          uint32_t pTableNTC[161] = {
     13          	3482, 3452, 3422, 3391, 3359, 3325, 3291, 3257, 3221, 3184, 	// -10 ~	-1 [째C]
     14          	3146, 														//	 0
     15          	3108, 3069, 3028, 2987, 2947, 2903, 2861, 2818, 2775, 2732, 	//	 1 ~	10
     16          	2686, 2640, 2595, 2549, 2506, 2457, 2412, 2367, 2321, 2276, 	//	11 ~	20
     17          	2230, 2184, 2139, 2093, 2048, 2002, 1957, 1912, 1868, 1827, 	//	21 ~	30
     18          	1781, 1738, 1696, 1655, 1617, 1574, 1535, 1496, 1458, 1422, 	//	31 ~	40
     19          	1383, 1346, 1311, 1276, 1245, 1208, 1176, 1145, 1115, 1085, 	//	41 ~	50
     20          	1055, 1027,  998,  971,  943,  918,  892,  867,  843,  818, 	//	51 ~	60
     21          	 796,  773,  751,  730,  709,  689,  670,  651,  632,  614, 	//	61 ~	70
     22          	 597,  580,  564,  548,  532,  518,  503,  489,  475,  462, 	//	71 ~	80
     23          	 449,  437,  425,  413,  401,  390,  380,  369,  359,  349, 	//	81 ~	90
     24          	 340,  331,  322,  313,  304,  296,  288,  281,  273,  266, 	//	91 ~ 100
     25          	 259,  252,  246,  239,  233,  227,  221,  216,  210,  204, 	// 101 ~ 110
     26          	 199,  194,  189,  185,  180,  176,  171,  167,  163,  159, 	// 111 ~ 120
     27          	 155,  151,  148,  144,  141,  137,  134,  131,  128,  125, 	// 121 ~ 130
     28          	 122,  119,  116,  114,  111,  108,  106,  104,  101, 	99, 	// 131 ~ 140
     29          		97, 	95, 	92, 	90, 	88, 	86, 	85, 	83, 	81, 	79		// 141 ~ 150
     30          };
     31          #endif
     32          
     33          /*********************************************************************
     34          *	 	pTableRTD
     35          *		RTD PT100 에 대한 환산용 테이블 
     36          **********************************************************************/	
     37          #ifndef __P_TABLE_RTD__
     38          #define __P_TABLE_RTD__
     39          
     40          uint32_t pTableRTD[161] = {
     41          	1745, 1752, 1758, 1764, 1770, 1777, 1783, 1790, 1796, 1802, 	// -10 ~	-1 [째C]
     42          	1808, 																
     43          	1815, 1821, 1827, 1833, 1840, 1846, 1852, 1858, 1865, 1871, 	//	 1 ~	10
     44          	1877, 1883, 1890, 1896, 1902, 1908, 1914, 1920, 1926, 1933, 	//	11 ~	20
     45          	1939, 1945, 1951, 1957, 1963, 1969, 1976, 1982, 1988, 1994, 	//	21 ~	30
     46          	2000, 2006, 2012, 2018, 2024, 2030, 2036, 2042, 2048, 2054, 	//	31 ~	40
     47          	2060, 2066, 2072, 2078, 2084, 2090, 2096, 2102, 2108, 2114, 	//	41 ~	50
     48          	2120, 2126, 2132, 2138, 2143, 2149, 2155, 2161, 2167, 2173, 	//	51 ~	60
     49          	2179, 2185, 2190, 2196, 2202, 2208, 2214, 2220, 2225, 2231, 	//	61 ~	70
     50          	2237, 2243, 2249, 2254, 2260, 2266, 2272, 2278, 2283, 2289, 	//	71 ~	80
     51          	2295, 2301, 2306, 2312, 2318, 2323, 2329, 2335, 2340, 2346, 	//	81 ~	90
     52          	2352, 2357, 2363, 2369, 2374, 2380, 2386, 2391, 2397, 2403, 	//	91 ~ 100
     53          	2408, 2414, 2419, 2425, 2430, 2436, 2442, 2447, 2453, 2458, 	// 101 ~ 110
     54          	2464, 2469, 2475, 2481, 2486, 2492, 2497, 2503, 2508, 2514, 	// 111 ~ 120
     55          	2519, 2524, 2530, 2536, 2541, 2546, 2552, 2557, 2563, 2568, 	// 121 ~ 130
     56          	2574, 2579, 2584, 2590, 2595, 2601, 2606, 2611, 2617, 2622, 	// 131 ~ 140
     57          	2628, 2633, 2638, 2644, 2649, 2654, 2660, 2665, 2670, 2676		// 141 ~ 150
     58          };
     59          
     60          #endif
     61          
     62          
     63          /*********************************************************************
     64          *	 	Calc_BD_Temp
     65          *		ETH-01DV 온도 변환 함수 
     66          * 	val : ADC 값을 입력 
     67          **********************************************************************/
     68          float Calc_BD_Temp(uint32_t val)
     69          {
     70          	return (float)val * 165 / 4096 - 40;		// 째C = Vout[12bit=4096] / (Vin=5[V] / 165) - 40
     71          }
     72          
     73          /*********************************************************************
     74          *	 	Calc_BD_Humi
     75          *		ETH-01DV 습도 변환 함수 
     76          * 	val : ADC 값을 입력 
     77          **********************************************************************/
     78          float Calc_BD_Humi(uint32_t val)
     79          {
     80          //			return (double)val * 100 / 4096;			// %RH = Vout[12bit=4096] / (Vin=5[V] / 100)
     81          	return (float)val * 125 / 4096 - 12.5;
     82          }
     83          
     84          /*********************************************************************
     85          *	 	Calc_Temp_NTC
     86          *		NTC 온도 변환 함수 
     87          * 	val : ADC 값을 입력, TABLE 중간 값을 보간하여 표시 
     88          **********************************************************************/
     89          float Calc_Temp_NTC(uint32_t val)
     90          {
     91          	int i;
     92          
     93          	if ((val == 0) || (val > pTableNTC[0]) || (val < pTableNTC[160])){
     94          		return 0;
     95          
     96          	}
     97          
     98          	for (i = 0; i < 161; i++){
     99          		if (pTableNTC[i] < val){
    100          			break;
    101          		}
    102          	}
    103          	
    104          	if (i == 0){
    105          		return 0;
    106          	}
    107          	
    108          	float dv = (float) val;
    109          	float d1 = (float) pTableNTC[i - 1];
    110          	float d2 = (float) pTableNTC[i];
    111          	
    112          	return (dv - d1) / (d2 - d1) + i - 11;
    113          }
    114          
    115          /*********************************************************************
    116          *	 	Calc_Temp_RTD
    117          *		RTC 온도 변환 함수 
    118          * 	val : ADC 값을 입력, TABLE 중간 값을 보간하여 표시 
    119          **********************************************************************/
    120          float Calc_Temp_RTD(uint32_t val)
    121          {
    122          	float dv;
    123          	float d1;
    124          	float d2;
    125              float res = 0;
    126          	int i;
    127          	
    128          	if ((val == 0) || (val < pTableRTD[0]) || (val > pTableRTD[160])){
    129          		return 0;
    130          	}
    131          	
    132          	for (i = 0; i < 161; i++)	{
    133          		if (pTableRTD[i] > val){
    134          			break;
    135          		}
    136          	}
    137          	
    138          	if (i == 0){
    139          		return 0;
    140          	}
    141          	
    142          	dv = (float)val;
    143          	d1 = (float)pTableRTD[i - 1];
    144          	d2 = (float)pTableRTD[i];
    145          	
    146          	res = (dv - d1) / (d2 - d1) + i - 11;
    147              return res;
    148          }

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Calc_BD_Humi
         8   -> __aeabi_d2f
         8   -> __aeabi_dadd
         8   -> __aeabi_f2d
         8   -> __aeabi_fdiv
         8   -> __aeabi_fmul
         8   -> __aeabi_ui2f
       8   Calc_BD_Temp
         8   -> __aeabi_fadd
         8   -> __aeabi_fdiv
         8   -> __aeabi_fmul
         8   -> __aeabi_ui2f
      24   Calc_Temp_NTC
        24   -> __aeabi_fadd
        24   -> __aeabi_fdiv
        24   -> __aeabi_fsub
        24   -> __aeabi_i2f
        24   -> __aeabi_ui2f
      32   Calc_Temp_RTD
        32   -> __aeabi_fadd
        32   -> __aeabi_fdiv
        32   -> __aeabi_fsub
        32   -> __aeabi_i2f
        32   -> __aeabi_ui2f


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_2
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
      38  Calc_BD_Humi
      28  Calc_BD_Temp
     138  Calc_Temp_NTC
     140  Calc_Temp_RTD
     644  pTableNTC
     644  pTableRTD

 
 1'288 bytes in section .data
   372 bytes in section .text
 
   372 bytes of CODE memory
 1'288 bytes of DATA memory

Errors: none
Warnings: none
